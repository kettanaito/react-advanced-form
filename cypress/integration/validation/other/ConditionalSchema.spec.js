const toggleProviderSchema = () => cy.get('#provider-one').click()
const userFirstFormSchema = () => cy.get('#form-one').click()
const useSecondFormSchema = () => cy.get('#form-two').click()

describe('Conditional schema', function() {
  before(() => {
    cy.loadStory(['Validation', 'Other', 'Conditional schema'])
  })

  it('Properly validates with initial schema', () => {
    cy.getField('fieldOne')
      .valid(false)
      .invalid(false)
      .type('fo')
      .invalid()
      .type('o')
      .expected()
      .clear()
      .type('bar')
      .expected(false)

    cy.getField('fieldTwo')
      .hasValue('bar')
      .expected(false)
  })

  it('Properly validates when FormProvider.props.rules changes', () => {
    cy.getField('fieldThree')
      .valid(false)
      .invalid(false)
      .clear()
      .typeIn('foo')
      .valid(false)
      .invalid(false)
      .clear()
      .typeIn('123')
      .valid(false)
      .invalid(false)
      .blur()
      .wait(250)

    toggleProviderSchema()
    cy.getField('fieldThree')
      .valid(false)
      .invalid(false)
      .clear()
      .typeIn('foo')
      .expected()
      .clear()
      .typeIn('123')
      .expected(false)
  })

  it('Properly validates when Form.props.rules changes', () => {
    useSecondFormSchema()
    cy.getField('fieldOne')
      .valid(false)
      .invalid(false)
      .clear()
      .type('foo')
      .expected(false)
      .blur()
      .wait(250)

    userFirstFormSchema()
    cy.getField('fieldOne')
      .valid(false)
      .invalid(false)
      .focus()
      .blur()
      .expected()
  })

  it('Resets validation state of fields not present in next schema', () => {
    useSecondFormSchema()
    cy.getField('fieldTwo')
      .valid(false)
      .invalid(false)
  })
})
